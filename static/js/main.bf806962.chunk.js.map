{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovie","state","newMovie","imdbLink","imgLink","isSubmitValid","errors","titleErr","descriptionErr","imdbLinkErr","imgLinkErr","imdbIdErr","handleSubmit","event","preventDefault","onAdd","props","Object","values","some","item","setState","resetForm","handleChange","e","target","name","value","trim","this","method","onSubmit","htmlFor","type","id","placeholder","onChange","cols","rows","disabled","Component","App","moviesFromServer","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf806962.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewMovie.scss';\n\nexport class NewMovie extends Component {\n  state = {\n    newMovie: {\n      title: '',\n      description: '',\n      imdbLink: '',\n      imgLink: '',\n      imdbId: '',\n    },\n    isSubmitValid: true,\n    errors: {\n      titleErr: false,\n      descriptionErr: false,\n      imdbLinkErr: false,\n      imgLinkErr: false,\n      imdbIdErr: false,\n    },\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { onAdd } = this.props;\n\n    if (Object.values(this.state.newMovie).some(item => item === '')) {\n      this.setState(state => ({\n        errors: {\n          ...state.errors,\n          titleErr: !state.newMovie.title,\n          descriptionErr: !state.newMovie.description,\n          imdbLinkErr: !state.newMovie.imdbLink,\n          imgLinkErr: !state.newMovie.imgLink,\n          imdbIdErr: !state.newMovie.imdbId,\n        },\n        isSubmitValid: false,\n      }));\n\n      return;\n    }\n\n    onAdd(this.state.newMovie);\n    this.resetForm();\n  }\n\n  resetForm = () => {\n    this.setState({\n      newMovie: {\n        title: '',\n        description: '',\n        imdbLink: '',\n        imgLink: '',\n        imdbId: '',\n      },\n      isSubmitValid: true,\n      errors: {\n        titleErr: false,\n        descriptionErr: false,\n        imdbLinkErr: false,\n        imgLinkErr: false,\n        imdbIdErr: false,\n      },\n    });\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n\n    this.setState(state => ({\n      newMovie: {\n        ...state.newMovie,\n        [name]: value.trim(),\n      },\n    }));\n  }\n\n  render() {\n    const {\n      newMovie,\n      errors,\n    } = this.state;\n\n    return (\n      <form\n        method=\"POST\"\n        onSubmit={this.handleSubmit}\n      >\n        <h2 className=\"form-title\">Add new movie</h2>\n        <div className=\"form-field\">\n          <label\n            htmlFor=\"movie-title\"\n            className=\"inp-title\"\n          >\n            Title:\n          </label>\n          <input\n            name=\"title\"\n            type=\"text\"\n            id=\"movie-title\"\n            placeholder=\"Movie title\"\n            className={errors.titleErr && 'invalid'}\n            value={newMovie.title}\n            onChange={this.handleChange}\n          />\n          {errors.titleErr && (\n            <span className=\"error\">\n              Please enter a movie title\n            </span>\n          )}\n        </div>\n        <div className=\"form-field\">\n          <label\n            htmlFor=\"description\"\n            className=\"inp-title\"\n          >\n            Description:\n          </label>\n          <textarea\n            name=\"description\"\n            id=\"movie-desc\"\n            cols=\"20\"\n            rows=\"5\"\n            placeholder=\"Movie description\"\n            className={errors.descriptionErr && 'invalid'}\n            value={newMovie.description}\n            onChange={this.handleChange}\n          />\n          {errors.descriptionErr && (\n            <span className=\"error\">\n              Please enter a movie description\n            </span>\n          )}\n        </div>\n        <div className=\"form-field\">\n          <label\n            htmlFor=\"imdb-link\"\n            className=\"inp-title\"\n          >\n            IMDb link:\n          </label>\n          <input\n            name=\"imdbLink\"\n            type=\"text\"\n            id=\"imdb-link\"\n            placeholder=\"IMDb link\"\n            className={errors.imdbLinkErr && 'invalid'}\n            value={newMovie.imdbLink}\n            onChange={this.handleChange}\n          />\n          {errors.imdbLinkErr && (\n            <span className=\"error\">\n              Please enter a movie IMDb Link\n            </span>\n          )}\n        </div>\n        <div className=\"form-field\">\n          <label\n            htmlFor=\"img-link\"\n            className=\"inp-title\"\n          >\n            Image link:\n          </label>\n          <input\n            name=\"imgLink\"\n            type=\"text\"\n            id=\"img-link\"\n            placeholder=\"Image link\"\n            className={errors.imgLinkErr && 'invalid'}\n            value={newMovie.imgLink}\n            onChange={this.handleChange}\n          />\n          {errors.imgLinkErr && (\n            <span className=\"error\">\n              Please enter a movie image Link\n            </span>\n          )}\n        </div>\n        <div className=\"form-field\">\n          <label\n            htmlFor=\"imdb-id\"\n            className=\"inp-title\"\n          >\n            IMDb ID:\n          </label>\n          <input\n            name=\"imdbId\"\n            type=\"text\"\n            id=\"imdb-id\"\n            placeholder=\"IMDb ID\"\n            className={errors.imdbIdErr && 'invalid'}\n            value={newMovie.imdbId}\n            onChange={this.handleChange}\n          />\n          {errors.imdbIdErr && (\n            <span className=\"error\">\n              Please enter a movie IMDb ID\n            </span>\n          )}\n        </div>\n        <button\n          type=\"submit\"\n          className=\"btn\"\n          disabled={!this.state.isSubmitValid}\n        >\n          Add movie\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [\n        ...state.movies,\n        movie,\n      ],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}